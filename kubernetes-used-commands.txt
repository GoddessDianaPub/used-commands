
** minikube cli is for stratup/deleting the cluster, but we manage minikube with kubectl cli **

About Cluster:

## The resources are deployed in kube-system namespace ##

# To see what you can do with minikube
minikube

# To see what you can do with kubectl
kubectl

# To get the kubectl cli command list
kubectl --help

# To get the sub command of kubectl cli command list
kubectl <sub command name> --help

# Lists the default driver configured (if any)
minikube config get driver

# Sets the default driver you choose
minikube config set driver <driver name>

# Starts a minikube cluster
minikube start --driver=<driver name>

# To see the status of the minikube cluster available
minikube status

# To see the kubernetes veriosn installed
kubectl version --output=yaml
kubectl version --output=json

# Lists the ip address of our minikube
minikube ip

#To start a new minikube
minikube delete
minikube start

# To check with cgroup driver is being used
ps -p 1




TLS and certificates:

# To generate a certificate using openssl e.g. ca.key
openssl genrsa -out <cert name>.key 2048

# To generate certificate signing request e.g. ca.csr
openssl req -new -key <cert name>.key -subj "/<Component name>" -out <cert name>.csr
#For kubernetes CA it will be:
openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr
#For admin it will be (CN=kube-admin is a logical name):
openssl req -new -key admin.key -subj "/CN=kube-admin" -out admin.csr
#To sgin it to a specific group:
openssl req -new -key admin.key -subj "/CN=kube-admin/O=system:masters" -out admin.csr

#For kubernetes api server you need to create a .cnf file, with all the k8s DNS names and IPs e.g. openssl.cnf
openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -out apiserver.csr -config openssl.cnf

# To sign the certificate created, e.g. ca.crt
#For kubernetes ca we use self sign
openssl x509 -req -in ca.csr -signkey ca.key -out <name>.crt
#For admin we use the CA crt:
openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -out admin.crt
#For apiserver we use the CA crt:
openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -out apiserver.crt

# To view a certificate detailes
openssl x509 -in /etc/kubernetes/pki/<cert name>.crt -text -noout

# To view the etcd service logs
journalctl -u etcd.service -l

# To view the signing requests
kubectl get csr

# To view the signing requests content
kubectl get csr <request name> -o yaml

# To delete the csr request
kubectl delete csr <request name>

# To approve the csr request
kubectl certificate approve <request name>

# To reject the csr request
kubectl certificate deny <request name>

# To view the certificate content
kubectl get csr <request name> -o yaml

# To get the certificate content in base64 format and in one line
cat <file name> | base64 -w 0

# To decode the certificate
echo "<3 first chars>...<3 last chars>" | base64 --decode

# Creates a tls secret
kubectl create secret tls <tls name> \
  --cert "<path to the existing .crt file>" \
  --key "<path to the existing .key file>"



ETCD

# etcd config file path
/etc/kubernetes/manifests/etcd.yaml

# To view the etcd info
kubectl get pods -n kube-system | grep etcd
For windows:
kubectl get pods -n kube-system | findstr etcd

#ssh to the cluster pod:
ls /etc/kubernetes/manifests/ | grep -i etcd

# View details about advertise-client-urls and pki
kubectl describe pod -n kube-system etcd-cluster1-controlplane  | grep advertise-client-urls
kubectl describe pod -n kube-system etcd-cluster1-controlplane  | grep pki

# To backup the cluster to a file
ETCDCTL_API=3 etcdctl --endpoints <endpoint ip>:<endpoint port> snapshot save <file name>.db \
	--cacert=<ca.crt file path> \
	--cert=<server.crt file path> \
	--key=<server.key file path>



Clusters:

# To add a cluster to kubeconfig file
aws eks --region=us-east-1 update-kubeconfig --name <cluster_name>

# To switch between clusters
kubectx <cluster name>
kubectl config use-context <cluster name>
kubectl config use-context <cluster name> --kubeconfig path/to/config/file

# To see current context:
kubectx -c

# To switch back to previous context:
kubectx -

# A configmap which contains cluster information
kubectl cluster-info

# To see your clusters configuration
kubectl config view

# To choose a different contex
kubectl config use-contex <context name>
kubectl config --kubeconfig=/path/to/file use-contex <context name>

# To see your clusters configuredscp cluster1-controlplane:/opt/cluster1.db /opt
kubectl config get-clusters

# To unset a cluster
kubectl config unset users.<users cluster name>
kubectl config unset contexts.<contexts cluster name>
kubectl config unset clusters.<cluster name>

#To view the clusters that configured
kubectl config get-contexts 

#To delete a cluster
kubectl config delete-context <cluster context name>



Updates

#To make the node unscheduled and move all the pods to another nodes
kubectl drain <node name>
kubectl drain <node name> --ignore-daemonsets

# To make the node unscheduled without moving the pods to another nodes
kubectl cordon <node name>

# To configure the node back to be scheduled
kubectl uncordon <node name>



Persistent Volumes (pv), Persistent Volumes Claims (pvc), Storage Class (sc)

# Lists all the persistent volumes
kubectl get persistentvolume

# Lists all the persistent volumes claims
kubectl get persistentvolumeclaim

# Deletes an existing pvc
kubectl delete persistentvolumeclaim <pvcÂ name>

# Lists all the storage classes
kubectl get storageclass



Service Accounts:

# Lists all the service accounts
kubectl get sa

# Shows more detailes about a service account
kubectl describe sa <sa name>

# Lists sa secret's token
kubectl describe secret <sa name>-token-kbbdm

# Lists the files including the token file
kubectl exec -it <pod name> --ls <Mounts path>
e.g.
kubectl exec -it kandula-app --ls /var/run/secrets/kubernetes.io/serviceaccount

# To view the token content
kubectl exec -it kandula-app cat /var/run/secrets/kubernetes.io/serviceaccount/token

# Creates a service account yaml file
kubectl create sa <sa name> --dry-run=client -o yaml > <file name>.yaml

# To create a token for sa
kubectl create token <sa name>



Nodes:

# Displays all the nodes in the cluster
kubectl get node

# Lists wide details about the node as well as the ip address of our minikube
kubectl get node -o wide
kubectl describe node <node name>

# Access the super config file
kubectl get nodes --kubeconfig /path/to/the/file
e.g.
kubectl get nodes --kubeconfig /root/CKA/super.kubeconfig




Pods (po):

# Lists the available components in the pod
kubectl get pod

# To get logs about a pod
kubectl logs <pod name>

# Lists continuously updating list of pods in the Kubernetes cluster
kubectl get pod --watch

# Lists wide details about the available components in the pod
kubectl get pod -o wide
kubectl describe pod <pod name>

# Lists the pod labels
kubectl get pod --show-labels

# To see how you can create a pod
kubectl create -h

# Creates a pod
kubectl run <pod name> --image=<image name>

# Creates a pod with a specific label
kubectl run <pod name> -l <label:value> --image=<image name>

# Generates POD Manifest YAML file (-o yaml), it doesn't create it(--dry-run=client)
kubectl run <pod name> --image=<image name> --dry-run=client -o yaml

# Generates POD Manifest YAML file (-o yaml), to a yaml file
kubectl run <pod name> --image=<image name> --dry-run=client -oyaml > <file-name>.yaml

# Opens a terminal in the pod
kubectl exec -it <pod name> -- bin/bash

# To create a temporarily curl pod with a terminal
kubectl run curl --image=alpine/curl --rm -it -- sh

# To test a connection with a service within a pod (like telnet)
kubectl exec -it <pod name> -- sh
nc -v -z -w <timeout in seconds> <service name> <port>
e.g.
nc -v -z -w 2 secuere-service 80

# To view the logs about a pod
kubectl logs <pod name>

# To view a log with watch
kubectl logs <pod name> -f

# To view logs of a previous pod
kubectl logs <pod name> -f --previous

# Creates a service with a specific pod and expose it to the external network (default port is 80)
kubectl expose pod <pod name> --port=<port number> --name <service name>

# To view the logs about an init container in a pod
kubectl logs <pod name> -c <init container name>



Jobs & CronJob

# List the jobs
kubectl get job

# Deletes a job (as well as the pod created with the job)
kubectl delete job <job name>

# lists cronjobs
kubectl get cronjob

# Deletes a cronjob (as well as the pod created with the job)
kubectl delete cronjob <cronjob name>




Deployments (deploy):

# Creates a deployment
kubectl create deployment <deploy name> --image=<image name>

# Creates a service in a specific deployment and expose it to the external network (default port is 80)
kubectl expose deploy <deploy name> --port<port number>

# Create a deployment from a configuration file
kubectl apply -f <deployment file name>

# Deletes a deployment from a configuration file
kubectl delete -f <file name>

# Creates a deployment with certain replicas
kubectl create deployment <deploy name> --image=<image name> --replicas=<number of replicas>

# Generates Deployment YAML file (-o yaml). Don't create it(--dry-run=client)
kubectl create deployment --image=<image name> <deploy name> --dry-run=client -o yaml

# Creates a deployment file (not the resources) with certain number of replicas (in k8s version 1.19+)
kubectl create deployment --image=<image name> <deploy name> --replicas=<replica number> --dry-run=client -o yaml > nginx-deployment.yaml

# Lists the deployments we have
kubectl get deployment

# Lists wide details about the available components in the pod
kubectl get deploy -o wide
kubectl describe deploy <deploy name>

# To edit the deployment file
kubectl edit deployment <deploy name>

# Scales the replicas in a deployment
kubectl scale deployment  --replicas=<number of replicas>




Rollout

# To change the image version of a depployment (not recommended)
kubectl set image deployment <deploy name> <container name>=<image name:image version>

# To change the image version of a depployment with a record flag (to see the change-cause field)
kubectl set image deployment <deploy name> <container name>=<image name:image version> --record

# View the status
kubectl rollout status deploy/<deploy name>

# View the history
kubectl rollout history deploy/<deploy name>

# To view a specific rolluut revision
kubectl rollout history deploy/<deploy name> --revision=<revision number>

# Undo a chnage
kubectl rollout undo deploy/<deploy name>

# To rollback to a specific revision
kubectl rollout undo deploy/<deploy name> --to-revision=<revision number>



Replicaset (rs):

# lists the replica configured in the pod
kubectl get replicaset
kubectl get rs

# Explains about replicaset
kubectl explain replicaset

# Edits the current replicaset
kubectl edit replicaset <replicaset name>

# Changes the number of the replicasets
kubectl scale --replicas=<number> -f <file name>
kubectl scale --replicas=<number> replicaset <replica's name>



Services (svc)

# Lists all the configuration we created in the cluster with wide details using service/svc
kubectl get service
kubectl get svc

# Lists all the configuration we created in the cluster with wide details using service/svc 
kubectl get svc -o wide

# Assigns an exteranl ip address to a service in order to be able to browse with it
minikube service <service name>

# Creates a service
kubectl create svc <service name>



Secrets:

# Creates encoded username that needs to be copied to the secret file
echo -n 'username' | base64

# Creates encoded password that needs to be copied to the secret file
echo -n 'password' | base64

# To decode username
echo -n 'username' | base64 --decode

# To decoded password
echo -n 'password' | base64 --decode

# Create a secret component from a secret configuration file
kubectl apply -f <secret file name>

# Lists secret types
kubectl create secret

# Lists the secrets component details
kubectl get secret

# To view details about secrets without the values
kubectl describe secret <secret file name>

# To view details about secrets with the values
kubectl get secret <secret file name> -o yaml

# To create a secret for private registry login use docker-registry secret type
kubectl create secret <secret type name> <secret name> \ 
    --docker-server=<server name>  \
    --docker-username=<useranem>  \
    --docker-password=<password>  \
	--docker-email=<email address>

# To view the user that execute a specific process in a pod
kubectl exec <pod name> -- whoami



Roles, RolBindings, ClusterRoles and ClusterRolBindings:

# Lists the roles
kubectl get roles
kubectl get roles -n <namespace name>

# Lists more details about a role
kubectl describe role <role name>
kubectl describe role <role name> -n <namespace name>

# Lists the RolesBindings
kubectl get rolebindings

# Lists more details about a RoleBinding
kubectl describe rolebinding <rolebinding name>

# Lists the ClusterRoles
kubectl get clusterroles
kubectl get clusterroles --no-headers | wc -l
kubectl get clusterroles --no-headers -o json | jq '.items | length'

# Lists more details about a ClusterRole
kubectl describe clusterrole <clusterrole name>

# Lists the ClusterRolesBindings
kubectl get clusterrolebindings
kubectl get clusterrolebindings --no-headers | wc -l

# Lists more details about a ClusterRoleBinding
kubectl describe clusterrolebinding <clusterrolebinding name>

# User role/clusterRole check
kubectl auth can-i <permissions> <component name>
kubectl auth can-i <permissions> <component name> -n <namespace name>
e.g.
kubectl auth can-i create deploy
kubectl auth can-i delete node --namespace test

# Checks other users permissions
kubectl auth can-i <permissions> <component name> --as <user>
kubectl auth can-i <permissions> <component name> --as <user> -n <namespace name>
e.g.
kubectl auth can-i create deploy --as dev-user
kubectl auth can-i delete pod --as dev-user -n test



Admission Controllers

# Lists he admission controllers enabled by default
kube-apiserver -h | grep enable-addmission-plugins
kube-apiserver -h | findstr enable-addmission-plugins

# To list it within the kube-api pod
kubectl exec -it kube-apiserver-minikube -- kube-apiserver -h | grep "enable-admission-plugins"
kubectl exec -it kube-apiserver-minikube -- kube-apiserver -h | findstr enable-admission-plugins

# Lists all the enabled and disabled plugins
ps -ef | grep kube-apiserver | grep addmissionn-plugins



ConfigMap (cm):

# Creates a configmap from a configuration file
kubectl create -f <configmap file name>
kubectl apply -f <configmap file name>

# Lists the configmap component details
kubectl get configmap
kubectl get cm



Namespaces (ns/n):

# Lists the namespaces in the cluster (you can also includes it in the configmap.yaml file)
kubectl get namespace
kubectl get ns

# Creates a namespace 
kubectl create namespace <namespace name>

# Lists the namespaces in the cluster (depends on "kubectx" command)
kubens
kubectl get namespace

# To switch back to previous namespace
kubens -

# Changes the default namespace to whatever you want
kubens <namespace name>
e.g.
kubens my-namespace
or
kubectl config set-context --current --namespace=<namespace name>

# To verify the namespace change
kubectl config view --minify | grep namespace

# Lists all the components
kubectl api-resources

# Lists all the components that are not part of any namespace
kubectl api-resources --namespaced=false

# Lists all the components that are part of any namespace
kubectl api-resources --namespaced=true

# Lists the component namespace (-n = namespace)
kubectl get <component name> -n <namespace name>
kubectl get <component name> -o yaml
e.g.
kubectl get configmap -n default
kubectl get configmap -o yaml

# Lists all the components under a specific namespace (-n = namespace)
kubectl get all -n <namespace name>

# Lists all the pods in a specific namespace
kubectl get pod --namespace=<namespace name>

# Creates a pod in a specific namespace
kubectl run <pod name> --image=<image name> --namespace=<namespace name>

# Creates a deployment in a specific namespace with replicas
kubectl create deployment <deploy name> --image=<image name> --replicas=<number of replicas> -n <namespace name>

# Lists all the pods in all the namespaces
kubectl get pod --all-namespaces
kubectl get pod -A

# Creates the component in a specific namespace (it's recommended to add it to the configmap file)
kubectl apply -f <component file name> --namespace=my-namespace
e.g.
kubectl apply -f mongo-configmap.yaml --namespace=<namespace name>

# To limit resources in a sprcific namespace you need to create a Resource Quota

#To view the logs for the pod
kubectl -n <namespace name> exec -it <pod name> -- cat /log/app.log



Ingress (ing):

# Starts and configures the k8s nginx implemetation of ingree controller
minikube addons enable ingress

# Lists the ingress configured
kubectl get ingress

# Lists the ingress configured in a specifc namespace
kubectl get ingress -n <namespace name>

# Watchs the ingress configured in a specifc namespace
kubectl get ingress -n <namespace name> --watch

# Lists more details about an ingress configured in a specifc namespace
kubectl describe ingress <ingress name> -n <namespace name>



Egress:

# Lists the engress configured
kubectl get engress

# Lists the engress configured in a specifc namespace
kubectl get engress -n <namespace name>

# Watchs the engress configured in a specifc namespace
kubectl get engress -n <namespace name> --watch

# Lists more details about an engress configured in a specifc namespace
kubectl describe engress <engress name> -n <namespace name>



Network policy (netpol):

# Lists the network policies configured
kubectl get networkpolicy
kubectl get netpol

# Lists the network policies configured in a specifc namespace
kubectl get netpol -n <namespace name>

# Lists more details about network policies configured in a specifc namespace
kubectl describe netpol <engress name> -n <namespace name>




Labels and selectors:

# Lists all the pods in a specific pod label
kubectl get pod --selector <key>=<value>

# Lists all the pods without the headers in a specific pod label
kubectl get pod --selector <key>=<value> --no-headers

# Shows the number of pods we have in a specific label (without the headers)
kubectl get pod --selector <key>=<value> --no-headers | wc -l

# Lists all the opbjects in a specific label
kubectl get all --selector <key>=<value>

# Lists all the opbjects without the headers in a specific label
kubectl get all --selector <key>=<value> --no-headers

# Shows the number of opbjects we have in a specific label (without the headers)
kubectl get all --selector <key>=<value> --no-headers | wc -l

# Lists the same pod that is in a few labels
kubectl get all --selector <key>=<value>,<key>=<value>,<key>=<value>,etc

# To label a node
kubectl label node <node name> <key>=<value>



Tolerations (pod level) and Taints (node level) - taint-effect options: NoSchedule, PreferNoSchedule, NoExecute

# Configuring a pod with a specific taint-effect can be done with files only
# Configures the node with a specific taint-effect
kubectl taint nodes <node name> <key>=<value>:<taint-effect>

# To see taints configured on nodes
kubectl describe node <node name> | grep Taint

For windows:
kubectl describe node <node name> | findstr Taint

# Removes a taint from a node
kubectl taint nodes <node name> <key>=<value>:<taint-effect>-



Helm:

# To search for a deployment (as well as in helm hub site)
helm search <keyword>

# To download chart from a repo
helm pull --untar <repo name>/<release name>

# Installls a chart
helm install <release name> <chart path>

# Upgrades helm
helm upgrade <chart name>

# To list installed packages
helm list

# To uninstall packages
helm uninstall <release name>

# Restore to the last previous version (tiller keeps the charts history, available until helm v2)
helm rollback <chart name>

# Installs helm with a specific values to override the values file
helm install --value=<value file name> <chart name>

# Installs helm with a specific version
helm install --set version=<version number>

# To search in artifact hub repo
helm search hub <app name>

# To search in different repos
##First add the repo to your computer
helm repo add <repo name> <repo url>
helm search repo <app name>

# To lists existing local repos
helm repo list



Monitoring

# To add metrics server
minikube addons enable metrics-server
#For all other clusters:
git clone https://github.com/kubernetes-sigs/metrics-server.git
kubectl create -f <relevant file>

#View performance metrics on nodes
kubectl top node 

#View performance metrics on pods
kubectl top pod



CNI

# To see the cni netwrok and more detailes
ps -aux | grep kubelet

# Lists all the supportes cni plugins
ls /opt/cni/bin

# The cni config file path
ls /etc/cni/net.d



CoreDNS

# The configuration core file path
/etc/coredns/Corefile
/etc/resolv.conf

# The coreDNS is a configmap file
kubectl get configmap -n kube-system

# Checks the kube-dns service configurations
kubectl -n kube-system get ep kube-dns

# The configuration file for kube-proxy
/var/lib/kube-proxy/config.conf



Troubleshooting

# To check the cluster services status
service kube-apiserver status
serivce kube-controller-manager status
service kube-scheduler status
service kubelet status
service kube-proxy status

# Checks the cluster logs
kubectl logs kube-apiserver-master -n kube-system

# To view the kube-api server logs
journalctl -u kube-apiserver

# To view the kubelet service logs
journalctl -u kubelet

# 
journalctl -u kubelet -f

# Displyas all the running process
top

# Shows the amount of disk space that is free on file systems
df -h

# Checks the kubelet certificate status
openssl x590 -in /var/lib/kubelet/<file name>.crt -text



JSON Path

# Shows the nodes in json format
kubectl get node -o json

# Shows the podes in json format
kubectl get pod -o json

# Lists the path for nodes (jq is a tool) [in windows use "" instead of '']
kubectl get node -o json | jq -c 'paths'
kubectl get node -o json | jq -c 'paths'
kubectl get node -o json | -c 'paths' | grep type
kubectl get node -o json | -c 'paths' | grep type | grep -v condition

# Pass a pod query in a json path query
kubectl get pod -o jsonpath='{<query>}'
kubectl get pod -o jsonpath='{<query>}' | jq

# Lists the nodes name in the cluster
kubectl get node -o jsonpath='{.items[*].metadata.name}'

# Lists the hardware architecture of the nodes
kubectl get node -o jsonpath='{.items[*].status.nodeInfo.architecture}'

# Lists the OS image of the nodes and save if to a file
kubectl get nodes -o jsonpath='{.items[*].status.nodeInfo.osImage}' > /opt/outputs/nodes_os.txt

# Get the usernames from a file
kubectl config view --kubeconfig=my-kube-config -o jsonpath="{.users[*].name}"

# Identifies the context configured for the aws-user in the my-kube-config context file
kubectl config view --kubeconfig=my-kube-config -o jsonpath="{.contexts[?(@.context.user=='aws-user')].name}"

# Returns the count of CPUs on these nodes
kubectl get node -o jsonpath='{.items[*].status.capacity.cpu}'

# Combines the results of 2 queries
kubectl get node -o jsonpath='{.items[*].metadata.name}{.items[*].status.capacity.cpu}'

# Combines the results of 2 queries, and shows them in 2 new lines
kubectl get node -o jsonpath='{.items[*].metadata.name}{"\n"}{.items[*].status.capacity.cpu}'

# Combines the results of 2 queries, and shows them with a tab
kubectl get node -o jsonpath='{.items[*].metadata.name}{"\t"}{.items[*].status.capacity.cpu}'

# This is afunction query to print the each node and cpu nodes in different columns
kubectl get node -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.capacity.cpu}{"\n"}{end}'

# Lists data with custom columns for each resource in the query
kubectl get <resource name> -o=custom-columns=<column name>:<json path>
kubectl get <resource name> -o=custom-columns=<column name>:<json path>,<column name>:<json path>
e.g.
kubectl get node -o=custom-columns=NODE:.metadata.name
kubectl get node -o=custom-columns=NODE:.metadata.name,CPU:.status.capacity.cpu

# To sort by the resource values
kubectl get <resource name> --sort-by=<json path>
e.g.
kubectl get node --sort-by=.metadata.name
kubectl get node --sort-by=.status.capacity.cpu

##Sorts by persistent volume specs
kubectl get pv --sort-by=.spec.capacity.storage
kubectl get pv --sort-by=.spec.capacity.storage -o=custom-columns=NAME:.metadata.name,CAPACITY:.spec.capacity.storage



General commands:

# Deletes a component
kubectl delete <component> <component name>

# Lists all the components created in the cluster
kubectl get all

# To get more details about certain components
kubectl describe <component name> <component instance name>

# Creates multiple components from multiple files
kubectl apply -f /path/to/folder

# Deletes a component from a file
kubectl delete -f <file name>

# Creates a component depending on the file content
kubectl create -f <file name>

# Creates / updates a component depending on the file content
kubectl apply -f <file name>

# Applies changes made on a file
kubectl replace -f <file name>

# Deletes the current component and re-create it
kubectl replace --force -f <file name>

# Lists all running processes to filter the string kube-scheduler
Linux:
ps -aux | grep kube-scheduler
Windows
tasklist /v | findstr kube-scheduler

# To see all the component from the same types e.g. mongodb
Linux terminal:
kubectl get all | grep <component name>
kubectl get all | grep mongodb
Windows cmd:
kubectl get all | findstr <component name>
kubectl get all | findstr mongodb

# To start a kube proxy in the background
kubectl proxy <port number>&
e.g.
kubectl proxy 8001&

# Lists the api version for authorization
curl localhost:8001/apis/authorization.k8s.io

# To list all available apis at root (uses the current credentials)
kubectl proxy
curl http://localhost:8001 -k

# Lists all the api groups
curl http://localhost:6443 -k

# Lists all the resource group names
curl http://localhost:6443/apis -k | grep "name"

# kubeapi file path and version
/etc/kubernetes/manifests/kube-apiserver.yaml
--runtime-config=

# Lists all the opbjects without the headers in a specific component
kubectl get all --<component name> --no-headers

# Lists all the opbjects without the headers in a specific component in all ns
kubectl get --<component name> -A --no-headers

# Shows the number of opbjects we have in a specific component (without the headers)
kubectl get all --<component name> --no-headers | wc -l

# Shows the number of opbjects we have in a specific component (without the headers) in all ns
kubectl get --<component name> -A --no-headers | wc -l

# Checks the preffered api version configured for a resource from a storage version
kubectl explain <resource name>
e.g.
kubectl explain deploy

# Changes the api version in a yaml file and output the changes (needed to be installed separately)
kubectl-convert -f <file name> --output-version <new-api>
e.g.
kubectl-convert -f nginx.yaml --output-version apps/v1

# You can pass it to a file and re-create it
kubectl-convert -f <current file name> --output-version <new-api> > <new file name>
kubectl apply -f <new file name>

# Lists the operators on my cluster
kubectl get crd