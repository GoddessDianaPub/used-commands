
** minikube cli is for stratup/deleting the cluster, but we manage minikube with kubectl cli **

About Cluster:

# To see what you can do with minikube
minikube

# To see what you can do with kubectl
kubectl

# To get the kubectl cli command list
kubectl --help

# To get the sub command of kubectl cli command list
kubectl <sub command name> --help

# Lists the default driver configured (if any)
minikube config get driver

# Sets the default driver you choose
minikube config set driver <driver name>

# Starts a minikube cluster
minikube start --driver=<driver name>

# To see the status of the minikube cluster available
minikube status

# To see the kubernetes veriosn installed
kubectl version --output=yaml
kubectl version --output=json

# Lists the ip address of our minikube
minikube ip

#To start a new minikube
minikube delete
minikube start


ETCD
# To view the etcd info
kubectl get pods -n kube-system | grep etcd
For windows:
kubectl get pods -n kube-system | findstr etcd

#ssh to the cluster pod:
ls /etc/kubernetes/manifests/ | grep -i etcd

kubectl describe  pods -n kube-system etcd-cluster1-controlplane  | grep advertise-client-urls
kubectl describe  pods -n kube-system etcd-cluster1-controlplane  | grep pki



Clusters:

# To add a cluster to kubeconfig file
aws eks --region=us-east-1 update-kubeconfig --name <cluster_name>

# To switch between clusters
kubectx <cluster name>
kubectl config use-context <cluster name>

# A configmap which contains cluster information
kubectl cluster-info

# To see your clusters configuration
kubectl config view

# To see your clusters configuredscp cluster1-controlplane:/opt/cluster1.db /opt
kubectl config get-clusters

# To unset a cluster
kubectl config unset users.<users cluster name>
kubectl config unset contexts.<contexts cluster name>
kubectl config unset clusters.<cluster name>


#To view the clusters that configured
kubectl config get-contexts

#To delete a cluster
kubectl config delete-context <cluster context name>


Updates

#To make the node unscheduled and move all the pods to another nodes
kubectl drain <node name>
kubectl drain <node name> --ignore-daemonsets

# To make the node unscheduled without moving the pods to another nodes
kubectl cordon <node name>

# To configure the node back to be scheduled
kubectl uncordon <node name>


Nodes:

# Displys all the nodes in the cluster
kubectl get node

# Lists wide details about the node as well as the ip address of our minikube
kubectl get node -o wide
kubectl describe node <node name>


Pods:

# Lists the available components in the pod
kubectl get pod

# To get logs about a pod
kubectl logs <pod name>

# Lists continuously updating list of pods in the Kubernetes cluster
kubectl get pod --watch

# Lists wide details about the available components in the pod
kubectl get pod -o wide
kubectl describe pod <pod name>

# To see how you can create a pod
kubectl create -h

# Creates a pod
kubectl run <pod name> --image=<image name>

# Creates a pod with a specific label
kubectl run <pod name> -l <label:value> --image=<image name>

# Generates POD Manifest YAML file (-o yaml), it doesn't create it(--dry-run=client)
kubectl run <pod name> --image=<image name> --dry-run=client -o yaml

# Generates POD Manifest YAML file (-o yaml), to a yaml file
kubectl run <pod name> --image=<image name> --dry-run=client -o yaml > <file-name>.yaml

# Opens a terminal in the pod
kubectl exec -it <pod name> -- bin/bash

# To view the logs about a pod
kubectl logs <pod name>

# Creates a service with a specific pod and expose it to the external network (default port is 80)
kubectl expose pod <pod name> --port=<port number> --name <service name>

# To view the logs about an init container in a pod
kubectl logs <pod name> -c <init container name>


Deployments (deploy):

# Creates a deployment
kubectl create deployment <deploy name> --image=<image name>

# Creates a service in a specific deployment and expose it to the external network (default port is 80)
kubectl expose deploy <deploy name> --port<port number>

# Create a deployment from a configuration file
kubectl apply -f <deployment file name>

# Deletes a deployment from a configuration file
kubectl delete -f <file name>

# Creates a deployment with certain replicas
kubectl create deployment <deploy name> --image=<image name> --replicas=<number of replicas>

# Generates Deployment YAML file (-o yaml). Don't create it(--dry-run=client)
kubectl create deployment --image=<image name> <deploy name> --dry-run=client -o yaml

# Creates a deployment file (not the resources) with certain number of replicas (in k8s version 1.19+)
kubectl create deployment --image=<image name> <deploy name> --replicas=<replica number> --dry-run=client -o yaml > nginx-deployment.yaml

# Lists the deployments we have
kubectl get deployment

# Lists wide details about the available components in the pod
kubectl get deploy -o wide
kubectl describe deploy <deploy name>

# To edit the deployment file
kubectl edit deployment <deploy name>

# Scales the replicas in a deployment
kubectl scale deployment  --replicas=<number of replicas>



Replicaset (rs):

# lists the replica configured in the pod
kubectl get replicaset
kubectl get rs

# Explains about replicaset
kubectl explain replicaset

# Edits the current replicaset
kubectl edit replicaset <replicaset name>

# Changes the number of the replicasets
kubectl scale --replicas=<number> -f <file name>
kubectl scale --replicas=<number> replicaset <replica's name>


Services (svc)

# Lists all the configuration we created in the cluster with wide details using service/svc
kubectl get service
kubectl get svc

# Lists all the configuration we created in the cluster with wide details using service/svc 
kubectl get svc -o wide

# Assigns an exteranl ip address to a service in order to be able to browse with it
minikube service <service name>

# Creates a service
kubectl create svc <service name>


Secrets:

# Creates encoded username that needs to be copied to the secret file
echo -n 'username' | base64

# Creates encoded password that needs to be copied to the secret file
echo -n 'password' | base64

# To decode username
echo -n 'username' | base64 --decode

# To decoded password
echo -n 'password' | base64 --decode

# Create a secret component from a secret configuration file
kubectl apply -f <secret file name>

# Lists the secrets component details
kubectl get secret

# To view details about secrets without the values
kubectl describe secret <secret file name>

# To view details about secrets with the values
kubectl get secret <secret file name> -o yaml



ConfigMap:

# Creates a configmap from a configuration file
kubectl create -f <configmap file name>
kubectl apply -f <configmap file name>

# Lists the configmap component details
kubectl get configmap
kubectl get cm


Namespaces (ns/n):

# Lists the namespaces in the cluster (you can also includes it in the configmap.yaml file)
kubectl get namespace
kubectl get ns

# Creates a namespace 
kubectl create namespace <namespace name>

# Lists the namespaces in the cluster (depends on "kubectx" command)
kubens
kubectl config get-contexts

# Changes the default namespace to whatever you want
kubens <namespace name>
e.g.
kubens my-namespace
or
kubectl config set-contex --namespace=<namespace name>

# Lists all the components that are not part of any namespace
kubectl api-resources --namespaced=false

# Lists all the components that are part of any namespace
kubectl api-resources --namespaced=true

# Lists the component namespace (-n = namespace)
kubectl get <component name> -n <namespace name>
kubectl get <component name> -o yaml
e.g.
kubectl get configmap -n default
kubectl get configmap -o yaml

# Lists all the components under a specific namespace (-n = namespace)
kubectl get all -n <namespace name>

# Lists all the pods in a specific namespace
kubectl get pod --namespace=<namespace name>

# Creates a pod in a specific namespace
kubectl run <pod name> --image=<image name> --namespace=<namespace name>

# Creates a deployment in a specific namespace with replicas
kubectl create deployment <deploy name> --image=<image name> --replicas=<number of replicas> -n <namespace name>

# Lists all the pods in all the namespaces
kubectl get pod --all-namespaces
kubectl get pod -A

# Creates the component in a specific namespace (it's recommended to add it to the configmap file)
kubectl apply -f <component file name> --namespace=my-namespace
e.g.
kubectl apply -f mongo-configmap.yaml --namespace=<namespace name>

# To limit resources in a sprcific namespace you need to create a Resource Quota

#To view the logs for the pod
kubectl -n <namespace name> exec -it <pod name> -- cat /log/app.log


Ingress:

# Starts and configures the k8s nginx implemetation of ingree controller
minikube addons enable ingress

# Lists the ingress configured
kubectl get ingress

# Lists the ingress configured in a specifc namespace
kubectl get ingress -n <namespace name>

# Watchs the ingress configured in a specifc namespace
kubectl get ingress -n <namespace name> --watch

# Lists more details about an ingress configured in a specifc namespace
kubectl describe ingress <ingress name> -n <namespace name>


Labels and selectors:

# Lists all the pods in a specific pod label
kubectl get pod --selector <key>=<value>

# Lists all the pods without the headers in a specific pod label
kubectl get pod --selector <key>=<value> --no-headers

# Shows the number of pods we have in a specific label (without the headers)
kubectl get pod --selector <key>=<value> --no-headers | wc -l

# Lists all the opbjects in a specific label
kubectl get all --selector <key>=<value>

# Lists all the opbjects without the headers in a specific label
kubectl get all --selector <key>=<value> --no-headers

# Shows the number of opbjects we have in a specific label (without the headers)
kubectl get all --selector <key>=<value> --no-headers | wc -l

# Lists the same pod that is in a few labels
kubectl get all --selector <key>=<value>,<key>=<value>,<key>=<value>,etc

# To label a node
kubectl label node <node name> <key>=<value>


Tolerations (pod level) and Taints (node level) - taint-effect options: NoSchedule, PreferNoSchedule, NoExecute

# Configuring a pod with a specific taint-effect can be done with files only
# Configures the node with a specific taint-effect
kubectl taint nodes <node name> <key>=<value>:<taint-effect>

# To see taints configured on nodes
kubectl describe node <node name> | grep Taint

For windows:
kubectl describe node <node name> | findstr Taint

# Removes a taint from a node
kubectl taint nodes <node name> <key>=<value>:<taint-effect>-


Helm:

# To search for a deployment (as well as in helm hub site)
helm search <keyword>

# Installls a chart
helm install <chart name>

# Upgrades helm
helm upgrade <chart name>

# Restore to the last previous version (tiller keeps the charts history, available until helm v2)
helm rollback <chart name>

# Installs helm with a specific values to override the values file
helm install --value=<value file name> <chart name>

# Installs helm with a specific version
helm install --set version=<version number>


Monitoring

# To add metrics server
minikube addons enable metrics-server
#For all other clusters:
git clone https://github.com/kubernetes-sigs/metrics-server.git

#View performance metrics on nodes
kubectl top node 

#View performance metrics on pods
kubectl top pod


Rollout
#View the status
kubectl rollout status deploy/<deploy name>

#View the history
kubectl rollout history deploy/<deploy name>

#Undo a chnage
kubectl rollout undo deploy/<deploy name>


General commands:

# Deletes a component
kubectl delete <component> <component name>

# Lists all the components created in the cluster
kubectl get all

# To get more details about certain components
kubectl describe <component name> <component instance name>

# Creates multiple components from multiple files
kubectl apply -f /path/to/folder

# Deletes a component from a file
kubectl delete -f <file name>

# Creates a component depending on the file content
kubectl create -f <file name>

# Creates / updates a component depending on the file content
kubectl apply -f <file name>

# Applies changes made on a file
kubectl replace -f <file name>

# Deletes the current component and re-create it
kubectl replace --force -f <file name>

# Lists all running processes to filter the string kube-scheduler
Linux:
ps -aux | grep kube-scheduler
Windows
tasklist /v | findstr kube-scheduler

# To see all the component from the same types e.g. mongodb
Linux terminal:
kubectl get all | grep <component name>
kubectl get all | grep mongodb
Windows cmd:
kubectl get all | findstr <component name>
kubectl get all | findstr mongodb
